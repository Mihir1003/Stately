-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from ParStately.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pListStm -> ListStm                         (0)
	%start_pStm -> Stm                                 (1)
	%start_pExp -> Exp                                 (2)
	%start_pVal -> Val                                 (3)
	%start_pBoolean -> Boolean                         (4)
	Ident -> L_Ident                                   (5)
	Integer -> L_integ                                 (6)
	String -> L_quoted                                 (7)
	ListStm ->                                         (8)
	ListStm -> Stm ';' ListStm                         (9)
	Stm -> Ident '=' Exp                               (10)
	Stm -> '{' ListStm '}'                             (11)
	Stm -> 'while' '(' Exp ')' Stm                     (12)
	Stm -> 'if' '(' Exp ')' Stm 'else' Stm             (13)
	Stm -> 'Wait(' Val ')'                             (14)
	Stm -> 'Fail()'                                    (15)
	Stm -> 'Succ()'                                    (16)
	Exp -> Val                                         (17)
	Exp -> 'Task(' Val ')(' Val ')'                    (18)
	Val -> String                                      (19)
	Val -> Integer                                     (20)
	Val -> Boolean                                     (21)
	Boolean -> 'true'                                  (22)
	Boolean -> 'false'                                 (23)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	')('           { PT _ (TS _ 3) }
	';'            { PT _ (TS _ 4) }
	'='            { PT _ (TS _ 5) }
	'Fail()'       { PT _ (TS _ 6) }
	'Succ()'       { PT _ (TS _ 7) }
	'Task('        { PT _ (TS _ 8) }
	'Wait('        { PT _ (TS _ 9) }
	'else'         { PT _ (TS _ 10) }
	'false'        { PT _ (TS _ 11) }
	'if'           { PT _ (TS _ 12) }
	'true'         { PT _ (TS _ 13) }
	'while'        { PT _ (TS _ 14) }
	'{'            { PT _ (TS _ 15) }
	'}'            { PT _ (TS _ 16) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pListStm rule  0
	%start_pStm     rule  1
	%start_pExp     rule  2
	%start_pVal     rule  3
	%start_pBoolean rule  4
	Ident           rule  5
	Integer         rule  6
	String          rule  7
	ListStm         rules 8, 9
	Stm             rules 10, 11, 12, 13, 14, 15, 16
	Exp             rules 17, 18
	Val             rules 19, 20, 21
	Boolean         rules 22, 23

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pListStm -> . ListStm                        (rule 0)

	'Fail()'       shift, and enter state 21
	'Succ()'       shift, and enter state 22
	'Wait('        shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	L_Ident        shift, and enter state 6
	%eof           reduce using rule 8

	Ident          goto state 19
	ListStm        goto state 27
	Stm            goto state 28

State 1

	%start_pStm -> . Stm                                (rule 1)

	'Fail()'       shift, and enter state 21
	'Succ()'       shift, and enter state 22
	'Wait('        shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	L_Ident        shift, and enter state 6

	Ident          goto state 19
	Stm            goto state 20

State 2

	%start_pExp -> . Exp                                (rule 2)

	'Task('        shift, and enter state 18
	'false'        shift, and enter state 8
	'true'         shift, and enter state 9
	L_integ        shift, and enter state 14
	L_quoted       shift, and enter state 15

	Integer        goto state 10
	String         goto state 11
	Exp            goto state 16
	Val            goto state 17
	Boolean        goto state 13

State 3

	%start_pVal -> . Val                                (rule 3)

	'false'        shift, and enter state 8
	'true'         shift, and enter state 9
	L_integ        shift, and enter state 14
	L_quoted       shift, and enter state 15

	Integer        goto state 10
	String         goto state 11
	Val            goto state 12
	Boolean        goto state 13

State 4

	%start_pBoolean -> . Boolean                        (rule 4)

	'false'        shift, and enter state 8
	'true'         shift, and enter state 9

	Boolean        goto state 7

State 5

	Ident -> . L_Ident                                  (rule 5)

	L_Ident        shift, and enter state 6


State 6

	Ident -> L_Ident .                                  (rule 5)

	'='            reduce using rule 5


State 7

	%start_pBoolean -> Boolean .                        (rule 4)

	%eof           accept


State 8

	Boolean -> 'false' .                                (rule 23)

	')'            reduce using rule 23
	')('           reduce using rule 23
	';'            reduce using rule 23
	'else'         reduce using rule 23
	%eof           reduce using rule 23


State 9

	Boolean -> 'true' .                                 (rule 22)

	')'            reduce using rule 22
	')('           reduce using rule 22
	';'            reduce using rule 22
	'else'         reduce using rule 22
	%eof           reduce using rule 22


State 10

	Val -> Integer .                                    (rule 20)

	')'            reduce using rule 20
	')('           reduce using rule 20
	';'            reduce using rule 20
	'else'         reduce using rule 20
	%eof           reduce using rule 20


State 11

	Val -> String .                                     (rule 19)

	')'            reduce using rule 19
	')('           reduce using rule 19
	';'            reduce using rule 19
	'else'         reduce using rule 19
	%eof           reduce using rule 19


State 12

	%start_pVal -> Val .                                (rule 3)

	%eof           accept


State 13

	Val -> Boolean .                                    (rule 21)

	')'            reduce using rule 21
	')('           reduce using rule 21
	';'            reduce using rule 21
	'else'         reduce using rule 21
	%eof           reduce using rule 21


State 14

	Integer -> L_integ .                                (rule 6)

	')'            reduce using rule 6
	')('           reduce using rule 6
	';'            reduce using rule 6
	'else'         reduce using rule 6
	%eof           reduce using rule 6


State 15

	String -> L_quoted .                                (rule 7)

	')'            reduce using rule 7
	')('           reduce using rule 7
	';'            reduce using rule 7
	'else'         reduce using rule 7
	%eof           reduce using rule 7


State 16

	%start_pExp -> Exp .                                (rule 2)

	%eof           accept


State 17

	Exp -> Val .                                        (rule 17)

	')'            reduce using rule 17
	';'            reduce using rule 17
	'else'         reduce using rule 17
	%eof           reduce using rule 17


State 18

	Exp -> 'Task(' . Val ')(' Val ')'                   (rule 18)

	'false'        shift, and enter state 8
	'true'         shift, and enter state 9
	L_integ        shift, and enter state 14
	L_quoted       shift, and enter state 15

	Integer        goto state 10
	String         goto state 11
	Val            goto state 35
	Boolean        goto state 13

State 19

	Stm -> Ident . '=' Exp                              (rule 10)

	'='            shift, and enter state 34


State 20

	%start_pStm -> Stm .                                (rule 1)

	%eof           accept


State 21

	Stm -> 'Fail()' .                                   (rule 15)

	';'            reduce using rule 15
	'else'         reduce using rule 15
	%eof           reduce using rule 15


State 22

	Stm -> 'Succ()' .                                   (rule 16)

	';'            reduce using rule 16
	'else'         reduce using rule 16
	%eof           reduce using rule 16


State 23

	Stm -> 'Wait(' . Val ')'                            (rule 14)

	'false'        shift, and enter state 8
	'true'         shift, and enter state 9
	L_integ        shift, and enter state 14
	L_quoted       shift, and enter state 15

	Integer        goto state 10
	String         goto state 11
	Val            goto state 33
	Boolean        goto state 13

State 24

	Stm -> 'if' . '(' Exp ')' Stm 'else' Stm            (rule 13)

	'('            shift, and enter state 32


State 25

	Stm -> 'while' . '(' Exp ')' Stm                    (rule 12)

	'('            shift, and enter state 31


State 26

	Stm -> '{' . ListStm '}'                            (rule 11)

	'Fail()'       shift, and enter state 21
	'Succ()'       shift, and enter state 22
	'Wait('        shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	'}'            reduce using rule 8
	L_Ident        shift, and enter state 6

	Ident          goto state 19
	ListStm        goto state 30
	Stm            goto state 28

State 27

	%start_pListStm -> ListStm .                        (rule 0)

	%eof           accept


State 28

	ListStm -> Stm . ';' ListStm                        (rule 9)

	';'            shift, and enter state 29


State 29

	ListStm -> Stm ';' . ListStm                        (rule 9)

	'Fail()'       shift, and enter state 21
	'Succ()'       shift, and enter state 22
	'Wait('        shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	'}'            reduce using rule 8
	L_Ident        shift, and enter state 6
	%eof           reduce using rule 8

	Ident          goto state 19
	ListStm        goto state 42
	Stm            goto state 28

State 30

	Stm -> '{' ListStm . '}'                            (rule 11)

	'}'            shift, and enter state 41


State 31

	Stm -> 'while' '(' . Exp ')' Stm                    (rule 12)

	'Task('        shift, and enter state 18
	'false'        shift, and enter state 8
	'true'         shift, and enter state 9
	L_integ        shift, and enter state 14
	L_quoted       shift, and enter state 15

	Integer        goto state 10
	String         goto state 11
	Exp            goto state 40
	Val            goto state 17
	Boolean        goto state 13

State 32

	Stm -> 'if' '(' . Exp ')' Stm 'else' Stm            (rule 13)

	'Task('        shift, and enter state 18
	'false'        shift, and enter state 8
	'true'         shift, and enter state 9
	L_integ        shift, and enter state 14
	L_quoted       shift, and enter state 15

	Integer        goto state 10
	String         goto state 11
	Exp            goto state 39
	Val            goto state 17
	Boolean        goto state 13

State 33

	Stm -> 'Wait(' Val . ')'                            (rule 14)

	')'            shift, and enter state 38


State 34

	Stm -> Ident '=' . Exp                              (rule 10)

	'Task('        shift, and enter state 18
	'false'        shift, and enter state 8
	'true'         shift, and enter state 9
	L_integ        shift, and enter state 14
	L_quoted       shift, and enter state 15

	Integer        goto state 10
	String         goto state 11
	Exp            goto state 37
	Val            goto state 17
	Boolean        goto state 13

State 35

	Exp -> 'Task(' Val . ')(' Val ')'                   (rule 18)

	')('           shift, and enter state 36


State 36

	Exp -> 'Task(' Val ')(' . Val ')'                   (rule 18)

	'false'        shift, and enter state 8
	'true'         shift, and enter state 9
	L_integ        shift, and enter state 14
	L_quoted       shift, and enter state 15

	Integer        goto state 10
	String         goto state 11
	Val            goto state 45
	Boolean        goto state 13

State 37

	Stm -> Ident '=' Exp .                              (rule 10)

	';'            reduce using rule 10
	'else'         reduce using rule 10
	%eof           reduce using rule 10


State 38

	Stm -> 'Wait(' Val ')' .                            (rule 14)

	';'            reduce using rule 14
	'else'         reduce using rule 14
	%eof           reduce using rule 14


State 39

	Stm -> 'if' '(' Exp . ')' Stm 'else' Stm            (rule 13)

	')'            shift, and enter state 44


State 40

	Stm -> 'while' '(' Exp . ')' Stm                    (rule 12)

	')'            shift, and enter state 43


State 41

	Stm -> '{' ListStm '}' .                            (rule 11)

	';'            reduce using rule 11
	'else'         reduce using rule 11
	%eof           reduce using rule 11


State 42

	ListStm -> Stm ';' ListStm .                        (rule 9)

	'}'            reduce using rule 9
	%eof           reduce using rule 9


State 43

	Stm -> 'while' '(' Exp ')' . Stm                    (rule 12)

	'Fail()'       shift, and enter state 21
	'Succ()'       shift, and enter state 22
	'Wait('        shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	L_Ident        shift, and enter state 6

	Ident          goto state 19
	Stm            goto state 48

State 44

	Stm -> 'if' '(' Exp ')' . Stm 'else' Stm            (rule 13)

	'Fail()'       shift, and enter state 21
	'Succ()'       shift, and enter state 22
	'Wait('        shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	L_Ident        shift, and enter state 6

	Ident          goto state 19
	Stm            goto state 47

State 45

	Exp -> 'Task(' Val ')(' Val . ')'                   (rule 18)

	')'            shift, and enter state 46


State 46

	Exp -> 'Task(' Val ')(' Val ')' .                   (rule 18)

	')'            reduce using rule 18
	';'            reduce using rule 18
	'else'         reduce using rule 18
	%eof           reduce using rule 18


State 47

	Stm -> 'if' '(' Exp ')' Stm . 'else' Stm            (rule 13)

	'else'         shift, and enter state 49


State 48

	Stm -> 'while' '(' Exp ')' Stm .                    (rule 12)

	';'            reduce using rule 12
	'else'         reduce using rule 12
	%eof           reduce using rule 12


State 49

	Stm -> 'if' '(' Exp ')' Stm 'else' . Stm            (rule 13)

	'Fail()'       shift, and enter state 21
	'Succ()'       shift, and enter state 22
	'Wait('        shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	L_Ident        shift, and enter state 6

	Ident          goto state 19
	Stm            goto state 50

State 50

	Stm -> 'if' '(' Exp ')' Stm 'else' Stm .            (rule 13)

	';'            reduce using rule 13
	'else'         reduce using rule 13
	%eof           reduce using rule 13


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 24
Number of terminals: 19
Number of non-terminals: 13
Number of states: 51
