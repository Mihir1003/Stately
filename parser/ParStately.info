-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from ParStately.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExpr -> Expr                               (0)
	%start_pVal -> Val                                 (1)
	%start_pBoolean -> Boolean                         (2)
	%start_pAction -> Action                           (3)
	Integer -> L_integ                                 (4)
	String -> L_quoted                                 (5)
	Expr -> Action Expr                                (6)
	Expr -> Action                                     (7)
	Expr -> Val                                        (8)
	Val -> String                                      (9)
	Val -> Integer                                     (10)
	Val -> Boolean                                     (11)
	Boolean -> 'true'                                  (12)
	Boolean -> 'false'                                 (13)
	Action -> 'Wait(' Val ')'                          (14)
	Action -> 'Fail()'                                 (15)
	Action -> 'Succ()'                                 (16)
	Action -> 'Task(' Val ')(' Val ')'                 (17)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	')'            { PT _ (TS _ 1) }
	')('           { PT _ (TS _ 2) }
	'Fail()'       { PT _ (TS _ 3) }
	'Succ()'       { PT _ (TS _ 4) }
	'Task('        { PT _ (TS _ 5) }
	'Wait('        { PT _ (TS _ 6) }
	'false'        { PT _ (TS _ 7) }
	'true'         { PT _ (TS _ 8) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExpr    rule  0
	%start_pVal     rule  1
	%start_pBoolean rule  2
	%start_pAction  rule  3
	Integer         rule  4
	String          rule  5
	Expr            rules 6, 7, 8
	Val             rules 9, 10, 11
	Boolean         rules 12, 13
	Action          rules 14, 15, 16, 17

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pExpr -> . Expr                              (rule 0)

	'Fail()'       shift, and enter state 7
	'Succ()'       shift, and enter state 8
	'Task('        shift, and enter state 9
	'Wait('        shift, and enter state 10
	'false'        shift, and enter state 12
	'true'         shift, and enter state 13
	L_integ        shift, and enter state 5
	L_quoted       shift, and enter state 18

	Integer        goto state 14
	String         goto state 15
	Expr           goto state 19
	Val            goto state 20
	Boolean        goto state 17
	Action         goto state 21

State 1

	%start_pVal -> . Val                                (rule 1)

	'false'        shift, and enter state 12
	'true'         shift, and enter state 13
	L_integ        shift, and enter state 5
	L_quoted       shift, and enter state 18

	Integer        goto state 14
	String         goto state 15
	Val            goto state 16
	Boolean        goto state 17

State 2

	%start_pBoolean -> . Boolean                        (rule 2)

	'false'        shift, and enter state 12
	'true'         shift, and enter state 13

	Boolean        goto state 11

State 3

	%start_pAction -> . Action                          (rule 3)

	'Fail()'       shift, and enter state 7
	'Succ()'       shift, and enter state 8
	'Task('        shift, and enter state 9
	'Wait('        shift, and enter state 10

	Action         goto state 6

State 4

	Integer -> . L_integ                                (rule 4)

	L_integ        shift, and enter state 5


State 5

	Integer -> L_integ .                                (rule 4)

	')'            reduce using rule 4
	')('           reduce using rule 4
	%eof           reduce using rule 4


State 6

	%start_pAction -> Action .                          (rule 3)

	%eof           accept


State 7

	Action -> 'Fail()' .                                (rule 15)

	'Fail()'       reduce using rule 15
	'Succ()'       reduce using rule 15
	'Task('        reduce using rule 15
	'Wait('        reduce using rule 15
	'false'        reduce using rule 15
	'true'         reduce using rule 15
	L_integ        reduce using rule 15
	L_quoted       reduce using rule 15
	%eof           reduce using rule 15


State 8

	Action -> 'Succ()' .                                (rule 16)

	'Fail()'       reduce using rule 16
	'Succ()'       reduce using rule 16
	'Task('        reduce using rule 16
	'Wait('        reduce using rule 16
	'false'        reduce using rule 16
	'true'         reduce using rule 16
	L_integ        reduce using rule 16
	L_quoted       reduce using rule 16
	%eof           reduce using rule 16


State 9

	Action -> 'Task(' . Val ')(' Val ')'                (rule 17)

	'false'        shift, and enter state 12
	'true'         shift, and enter state 13
	L_integ        shift, and enter state 5
	L_quoted       shift, and enter state 18

	Integer        goto state 14
	String         goto state 15
	Val            goto state 24
	Boolean        goto state 17

State 10

	Action -> 'Wait(' . Val ')'                         (rule 14)

	'false'        shift, and enter state 12
	'true'         shift, and enter state 13
	L_integ        shift, and enter state 5
	L_quoted       shift, and enter state 18

	Integer        goto state 14
	String         goto state 15
	Val            goto state 23
	Boolean        goto state 17

State 11

	%start_pBoolean -> Boolean .                        (rule 2)

	%eof           accept


State 12

	Boolean -> 'false' .                                (rule 13)

	')'            reduce using rule 13
	')('           reduce using rule 13
	%eof           reduce using rule 13


State 13

	Boolean -> 'true' .                                 (rule 12)

	')'            reduce using rule 12
	')('           reduce using rule 12
	%eof           reduce using rule 12


State 14

	Val -> Integer .                                    (rule 10)

	')'            reduce using rule 10
	')('           reduce using rule 10
	%eof           reduce using rule 10


State 15

	Val -> String .                                     (rule 9)

	')'            reduce using rule 9
	')('           reduce using rule 9
	%eof           reduce using rule 9


State 16

	%start_pVal -> Val .                                (rule 1)

	%eof           accept


State 17

	Val -> Boolean .                                    (rule 11)

	')'            reduce using rule 11
	')('           reduce using rule 11
	%eof           reduce using rule 11


State 18

	String -> L_quoted .                                (rule 5)

	')'            reduce using rule 5
	')('           reduce using rule 5
	%eof           reduce using rule 5


State 19

	%start_pExpr -> Expr .                              (rule 0)

	%eof           accept


State 20

	Expr -> Val .                                       (rule 8)

	%eof           reduce using rule 8


State 21

	Expr -> Action . Expr                               (rule 6)
	Expr -> Action .                                    (rule 7)

	'Fail()'       shift, and enter state 7
	'Succ()'       shift, and enter state 8
	'Task('        shift, and enter state 9
	'Wait('        shift, and enter state 10
	'false'        shift, and enter state 12
	'true'         shift, and enter state 13
	L_integ        shift, and enter state 5
	L_quoted       shift, and enter state 18
	%eof           reduce using rule 7

	Integer        goto state 14
	String         goto state 15
	Expr           goto state 22
	Val            goto state 20
	Boolean        goto state 17
	Action         goto state 21

State 22

	Expr -> Action Expr .                               (rule 6)

	%eof           reduce using rule 6


State 23

	Action -> 'Wait(' Val . ')'                         (rule 14)

	')'            shift, and enter state 26


State 24

	Action -> 'Task(' Val . ')(' Val ')'                (rule 17)

	')('           shift, and enter state 25


State 25

	Action -> 'Task(' Val ')(' . Val ')'                (rule 17)

	'false'        shift, and enter state 12
	'true'         shift, and enter state 13
	L_integ        shift, and enter state 5
	L_quoted       shift, and enter state 18

	Integer        goto state 14
	String         goto state 15
	Val            goto state 27
	Boolean        goto state 17

State 26

	Action -> 'Wait(' Val ')' .                         (rule 14)

	'Fail()'       reduce using rule 14
	'Succ()'       reduce using rule 14
	'Task('        reduce using rule 14
	'Wait('        reduce using rule 14
	'false'        reduce using rule 14
	'true'         reduce using rule 14
	L_integ        reduce using rule 14
	L_quoted       reduce using rule 14
	%eof           reduce using rule 14


State 27

	Action -> 'Task(' Val ')(' Val . ')'                (rule 17)

	')'            shift, and enter state 28


State 28

	Action -> 'Task(' Val ')(' Val ')' .                (rule 17)

	'Fail()'       reduce using rule 17
	'Succ()'       reduce using rule 17
	'Task('        reduce using rule 17
	'Wait('        reduce using rule 17
	'false'        reduce using rule 17
	'true'         reduce using rule 17
	L_integ        reduce using rule 17
	L_quoted       reduce using rule 17
	%eof           reduce using rule 17


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 18
Number of terminals: 10
Number of non-terminals: 10
Number of states: 29
