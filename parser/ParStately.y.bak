-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParStately
  ( happyError
  , myLexer
  , pListStm
  , pStm
  , pExp
  , pVal
  , pBoolean
  , pAction
  ) where

import Prelude

import qualified AbsStately
import LexStately

}

%name pListStm ListStm
%name pStm Stm
%name pExp Exp
%name pVal Val
%name pBoolean Boolean
%name pAction Action
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('      { PT _ (TS _ 1)  }
  ')'      { PT _ (TS _ 2)  }
  ')('     { PT _ (TS _ 3)  }
  ';'      { PT _ (TS _ 4)  }
  '='      { PT _ (TS _ 5)  }
  'Fail()' { PT _ (TS _ 6)  }
  'Succ()' { PT _ (TS _ 7)  }
  'Task('  { PT _ (TS _ 8)  }
  'Wait('  { PT _ (TS _ 9)  }
  'else'   { PT _ (TS _ 10) }
  'false'  { PT _ (TS _ 11) }
  'if'     { PT _ (TS _ 12) }
  'true'   { PT _ (TS _ 13) }
  'while'  { PT _ (TS _ 14) }
  '{'      { PT _ (TS _ 15) }
  '}'      { PT _ (TS _ 16) }
  L_Ident  { PT _ (TV $$)   }
  L_integ  { PT _ (TI $$)   }
  L_quoted { PT _ (TL $$)   }

%%

Ident :: { AbsStately.Ident }
Ident  : L_Ident { AbsStately.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

ListStm :: { [AbsStately.Stm] }
ListStm : {- empty -} { [] } | Stm ';' ListStm { (:) $1 $3 }

Stm :: { AbsStately.Stm }
Stm
  : Ident '=' Exp { AbsStately.Assign $1 $3 }
  | '{' ListStm '}' { AbsStately.Block $2 }
  | 'while' '(' Exp ')' Stm { AbsStately.While $3 $5 }
  | 'if' '(' Exp ')' Stm 'else' Stm { AbsStately.If $3 $5 $7 }
  | Action { AbsStately.EAction $1 }

Exp :: { AbsStately.Exp }
Exp
  : Val { AbsStately.EVal $1 }
  | 'Task(' Val ')(' Val ')' { AbsStately.ETask $2 $4 }

Val :: { AbsStately.Val }
Val
  : String { AbsStately.VString $1 }
  | Integer { AbsStately.VNumber $1 }
  | Boolean { AbsStately.VBoolean $1 }

Boolean :: { AbsStately.Boolean }
Boolean
  : 'true' { AbsStately.BTrue } | 'false' { AbsStately.BFalse }

Action :: { AbsStately.Action }
Action
  : 'Wait(' Val ')' { AbsStately.AWait $2 }
  | 'Fail()' { AbsStately.AFail }
  | 'Succ()' { AbsStately.ASucc }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

