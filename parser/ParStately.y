-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParStately
  ( happyError
  , myLexer
  , pExpr
  , pVal
  , pBoolean
  , pAction
  ) where

import Prelude

import qualified AbsStately
import LexStately

}

%name pExpr Expr
%name pVal Val
%name pBoolean Boolean
%name pAction Action
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  ')'      { PT _ (TS _ 1) }
  ')('     { PT _ (TS _ 2) }
  'Fail()' { PT _ (TS _ 3) }
  'Succ()' { PT _ (TS _ 4) }
  'Task('  { PT _ (TS _ 5) }
  'Wait('  { PT _ (TS _ 6) }
  'false'  { PT _ (TS _ 7) }
  'true'   { PT _ (TS _ 8) }
  L_integ  { PT _ (TI $$)  }
  L_quoted { PT _ (TL $$)  }

%%

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Expr :: { AbsStately.Expr }
Expr
  : Action Expr { AbsStately.E $1 $2 }
  | Action { AbsStately.EAction $1 }
  | Val { AbsStately.EVal $1 }

Val :: { AbsStately.Val }
Val
  : String { AbsStately.VString $1 }
  | Integer { AbsStately.VNumber $1 }
  | Boolean { AbsStately.VBoolean $1 }

Boolean :: { AbsStately.Boolean }
Boolean
  : 'true' { AbsStately.BTrue } | 'false' { AbsStately.BFalse }

Action :: { AbsStately.Action }
Action
  : 'Wait(' Val ')' { AbsStately.AWait $2 }
  | 'Fail()' { AbsStately.AFail }
  | 'Succ()' { AbsStately.ASucc }
  | 'Task(' Val ')(' Val ')' { AbsStately.ATask $2 $4 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

